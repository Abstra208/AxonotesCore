import * as jose from 'jose';
import * as crypto from 'crypto';
import * as fs from 'fs';
import * as path from 'path';

async function generateKeys(): Promise<void> {
    const outputFileName = '.env.generated';
    const outputFilePath = path.join(process.cwd(), outputFileName);

    // --- Auth.js Secret ---
    console.log('Generating AUTH_SECRET for Auth.js...');
    const authSecretBytes = crypto.randomBytes(32); // 32 bytes = 256 bits
    const authSecret = authSecretBytes.toString('base64url'); // Using base64url for env var safety
    console.log('AUTH_SECRET generated.');

    // --- EdDSA Keys for SpacetimeDB & Client ---
    const alg = 'EdDSA'; // Algorithm for Ed25519
    const keyIdFromEnv: string | undefined = process.env.SPACETIMEDB_KEY_ID;
    const keyId: string = keyIdFromEnv || `sptdb-key-${Date.now()}`;

    console.log(
        `\nGenerating ${alg} key pair with kid: ${keyId} for SpacetimeDB...`,
    );

    const { publicKey, privateKey }: {
        publicKey: jose.KeyObject;
        privateKey: jose.KeyObject;
    } = await jose.generateKeyPair(alg, {
        crv: 'Ed25519',
        extractable: true,
    });
    console.log(`${alg} key pair generated.`);

    // --- Prepare Keys for SpacetimeDB (JWTs, JWKS) ---
    const privateKeyPem: string = await jose.exportPKCS8(privateKey);
    const publicKeyPem: string = await jose.exportSPKI(publicKey);

    const publicJwkForSpacetimeDB: jose.JWK = await jose.exportJWK(publicKey);
    publicJwkForSpacetimeDB.alg = alg;
    publicJwkForSpacetimeDB.kid = keyId;
    publicJwkForSpacetimeDB.use = 'sig';
    console.log('SpacetimeDB key formats (PEM, JWK) prepared.');

    // --- Prepare Keys for Client Application (Ed25519 raw, for tweetnacl) ---
    if (!publicJwkForSpacetimeDB.x) {
        throw new Error(
            "Could not extract 'x' (public key) from JWK for client format.",
        );
    }
    const clientEd25519PublicKeyB64Url: string = publicJwkForSpacetimeDB.x;

    const privateJwkForClient: jose.JWK = await jose.exportJWK(privateKey);
    if (!privateJwkForClient.d) {
        throw new Error(
            "Could not extract 'd' (private key seed) from JWK for client format.",
        );
    }
    const clientEd25519PrivateKeySeedB64Url: string = privateJwkForClient.d;
    console.log('Client application key formats (raw Ed25519) prepared.');

    // --- Construct .env file content ---
    const envFileContent: string[] = [];

    envFileContent.push('--- Generated by key-generation script ---');
    envFileContent.push(`# Timestamp: ${new Date().toISOString()}`);

    envFileContent.push('\n# For Auth.js (NextAuth.js)');
    envFileContent.push(`AUTH_SECRET='${authSecret}'`);

    envFileContent.push('\n# For SpacetimeDB (server-side JWTs, JWKS)');
    envFileContent.push(
        `SPACETIMEDB_PRIVATE_KEY_PEM='${privateKeyPem.replace(/\n/g, '\\n')}'`,
    );
    envFileContent.push(
        `SPACETIMEDB_PUBLIC_KEY_PEM='${publicKeyPem.replace(/\n/g, '\\n')}'`,
    );
    envFileContent.push(
        `SPACETIMEDB_JWK='${JSON.stringify(publicJwkForSpacetimeDB)}'`,
    );
    envFileContent.push(`SPACETIMEDB_KEY_ID='${keyId}'`);

    envFileContent.push(
        '\n# For Client Signature Verification (server-side, using tweetnacl)',
    );
    envFileContent.push(`# Put this in your server's .env file:`);
    envFileContent.push(
        `CLIENT_ED25519_PUBLIC_KEY_B64URL='${clientEd25519PublicKeyB64Url}'`,
    );

    envFileContent.push(
        '\n# For Client Application (to be embedded or configured securely in the client)',
    );
    envFileContent.push(
        `# This is the client's private key seed. Handle with extreme care.`,
    );
    envFileContent.push(
        `# CLIENT_ED25519_PRIVATE_KEY_SEED_B64URL='${clientEd25519PrivateKeySeedB64Url}'`,
    );

    const fileContentString = envFileContent.join('\n') + '\n';

    // --- Write to file ---
    try {
        fs.writeFileSync(outputFilePath, fileContentString);
        console.log(
            `\n✅ Successfully generated keys and wrote them to: ${outputFilePath}`,
        );
        console.log(
            `   Please review this file. If it's for your main environment,`,
        );
        console.log(
            `   you might want to rename it to '.env' (and ensure it's in your .gitignore).`,
        );
    } catch (error) {
        console.error(
            `\n❌ Error writing keys to file ${outputFilePath}:`,
            error,
        );
        throw error; // Re-throw to be caught by the main catch block
    }

    // --- Final Instructions/Warnings ---
    console.log(
        `\n>>> Ensure SPACETIMEDB_KEY_ID in your environment matches the kid: ${keyId} (used in the generated JWK).`,
    );
    console.log(
        `>>> The CLIENT_ED25519_PUBLIC_KEY_B64URL is for the server to verify client signatures.`,
    );
    console.log(
        `>>> The CLIENT_ED25519_PRIVATE_KEY_SEED_B64URL is for the client app to generate signatures.`,
    );
    console.log(
        `    It is highly sensitive. Do NOT commit it to your server's repository if the client is separate.`,
    );
    console.log(
        `    Embed it securely within your client application or use a secure configuration mechanism.`,
    );
    console.log(
        `>>> The AUTH_SECRET is used by Auth.js for session encryption, CSRF protection, etc. Keep it secret!`,
    );
    console.log(
        `>>> Remember to add '${outputFileName}' (or '.env' if you rename it) to your .gitignore file!`,
    );

    console.log(
        '\n.------------------------------------------------------------------------------------------------------------------------------------.\n' +
        '| NOTE: Those are not all environment variables that are required for the server to run. See the .example.env file for more details. |\n' +
        '\'------------------------------------------------------------------------------------------------------------------------------------\''
    );
}

generateKeys().catch((error) => {
    console.error('Failed to generate keys:', error);
    process.exit(1);
});
